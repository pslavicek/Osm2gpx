#!/bin/bash
export LC_NUMERIC=C

# Close STDERR FD
#exec 2<&-
# Open STDOUT as $LOG_FILE file for read and write.
#exec 2<>/tmp/index.log
[ -e "tmp/relation/11880142.xml" ] && touch tmp/relation/11880142.xml
rm -rf tmp/gpx

osmurl="https://www.openstreetmap.org/api/0.6"

#echo "Our temp file is ${TMPDIR}" >&2
print=true;
validate=true;
garmin=trueX;

declare -A colorMap                              # Or declare separately
colorMap=( [black]=000000 [silver]=C0C0C0 [gray]=808080 [white]=FFFFFF [maroon]=800000 [red]=FF0000 [purple]=800080 [fuchsia]=FF00FF [green]=008000 [lime]=00FF00 [olive]=808000 [yellow]=FFFF00 [navy]=000080 [blue]=0000FF [teal]=008080 [aqua]=00FFFF ) # Then initialise

function checkFileTime {
	local file=$1
	local maxTime=${2:-3600}
	local diffTime=0;
	if [ -e "${file}" ]; then
		local fileTime=$(stat --format='%Y' "${file}")
		local currTime=$(date +%s)
		diffTime=$(($currTime-$fileTime));
	        echo "The $file is "$(bc -l <<<"scale=0;$diffTime/60")" minute(s) old." >&2
	        diffTime=$((${diffTime}-${maxTime}));
		if [ ${diffTime} -ge 0 ]; then
		        return 1;
		fi;
	else
#	        echo "The $file not found!" >&2
	        return 1;
	fi;
}

function downloadOsmPart {
	local filename="${TMPDIR}/${1}.xml"
	filename=${filename/\/full/-full}
	[ -d ${filename%/*} ] || mkdir -p ${filename%/*}
	checkFileTime "${filename}"
	if [ $? -ne 0 ]; then
		http=$(curl --silent --head "${osmurl}/${1}" | grep "HTTP\/[1-2].* [2\d\d]")
		if [ $? -ne 0 ]; then
        		echo -e "Url not found! ${osmurl}/${1}" >&2
        		touch ${filename}
        		return 1;
        	fi
        	echo "Download ... ${osmurl}/${1}" >&2
        	curl --silent "${osmurl}/${1}" -o ${filename}
        	local status=$?
        else
        	local size=$(stat -c%s "${filename}")
        	if [ $size -eq 0 ]; then
        		echo -e "Cache: File ${filename} is empty!" >&2
        		return 1;
        	fi;
		echo "Use cache file ${filename}" >&2
	fi;
#	ls -la ${filename} >&2
	ls ${filename}
}

function gpxValidate {
	local file=$1;
	command -V echo &>/dev/null
	if [ $? -ne 0 ]; then
		echo "GPX validation: xmllint not found!" >&2
		return 0;
	fi;
	echo "GPX validation ${file}" >&2
#	echo xmlstarlet validate --xsd "xsd/validation.xsd" --err ${file} >&2
	xmlstarlet validate --xsd "xsd/validation.xsd" --err ${file} >&2
	return $?
}

TMPDIR="./tmp"

while [ $# -ne 0 ]; do
	arg="$1"
	case "${arg}" in
		--output|-o)
			shift;
			gpxfile=$1
			;;
		--reverse|-r)
			reverse=true
			;;
		--validate|-v)
			validate=true
			;;
		--printmap|-pm)
			print=true
			;;
		--garmin|-g)
			garmin=true
			;;
		--dir|-d)
			TMPDIR=$1
			;;
		*)
			objectid=${1}
			;;
	esac
	shift
done

if [ -z ${TMPDIR} ]; then
	TMPDIR=$(mktemp -d) || exit 1
	trap 'rm -rf "${TMPDIR}"' EXIT
fi;

gpx_start=$(cat <<EOM1
<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<gpx version="1.1"
	creator="way2gpx - https://osm.slavics.cz"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.topografix.com/GPX/1/1"
EOM1
)

xsiDefault="\txsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\">"
nameSpaceGarmin="xmlns:gpxx=\"http://www.garmin.com/xmlschemas/GpxExtensions/v3\""
nameSpaceStyle="xmlns:gpx_style=\"http://www.topografix.com/GPX/gpx_style/0/2\""
nameSpaceSla="xmlns:osminfo=\"https://osm.slavics.cz/xsd/osminfo/OsmInfoV1\""
#xsiGarmin='\txmlns:gpxx="http://www.garmin.com/xmlschemas/GpxExtensions/v3"\n\txsi:schemaLocation="http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd http://www.garmin.com/xmlschemas/GpxExtensions/v3 https://www8.garmin.com/xmlschemas/GpxExtensionsv3.xsd">'

#xsiGarmin=${xsiDefault}

if [ -z "${objectid}" ]; then
	echo -e "$0 [--reverse|-r] [--validation|-v] [--printmap|-pm] [--garmin|-g] [--output|-o file.gpx] numberOfObject" >&2
	echo -e "\tconvert osm relation to gpx" >&2
#	echo -e "\t--reverse|-r\t: reverse path (only way)" >&2
	echo -e "\t--printmap|-pm\t: extract printmap data to .yml file" >&2
	echo -e "\t--garmin|-g\t: colour extensions as garmin" >&2
#	echo -e "\t--output|-o gpxfile\t: export to file" >&2
	echo -e "\t--validate|-v\t: export with GPX validation" >&2
	echo -e "\nExample\t$0 -r 327119963" >&2
	echo -e "\t$0 rel6452264" >&2
	exit 1;
fi

function checkGarminColour {
	local colour=${1,,}
	colour=${colour^}
	local arraycolor=(Black DarkRed DarkGreen DarkYellow DarkBlue DarkMagenta DarkCyan LightGray DarkGray Red Green Yellow Blue Magenta Cyan White Transparent)
	if [[ " ${arraycolor[@]} " =~ " ${colour} " ]]; then
		echo -e $colour
		return 0;
	else
		return 1;
	fi;
}

function getBoundary {
	local file=$1

	# Boundary
	cut -d ' ' -f2 "${file}" | sort -t ',' -k1 | head -n 1 | cut -d ',' -f1
	cut -d ' ' -f2 "${file}" | sort -r -t ',' -k1 | head -n 1 | cut -d ',' -f1
	cut -d ' ' -f2 "${file}" | sort -t ',' -k2 | head -n 1 | cut -d ',' -f2
	cut -d ' ' -f2 "${file}" | sort -r -t ',' -k2 | head -n 1 | cut -d ',' -f2

	# Last Timestamp
	sort "${file}" -r -k 3 | head -n 1 | cut -d ' ' -f 3
}

function generateWay {
	local wayid=$1
	local isReverse=$2
	echo -en "\n" >&2
	local osmfile=$(downloadOsmPart way/${wayid}/full)
	[ "$osmfile" == "" ] && exit 1

	local gpxFile=$(mktemp --tmpdir="./")
	
	echo "Extract data from '${osmfile}' $isReverse" >&2
	isReverse=${isReverse/"backward"/"true"}
	
	local NODEFILE=$(mktemp) || exit 1

	local name=$(grep -oP '<tag(.*) k=\"name\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local desc=$(grep -oP '<tag(.*) k=\"description\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local note=$(grep -oP '<tag(.*) k=\"note\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local type1=$(grep -oP '<tag(.*) k=\"highway\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local website=$(grep -oP '<tag(.*) k=\"website\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
#	local colour=$(grep -oP '<tag(.*) k=\"colour\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local author=$(grep -oP '<way(.*) user="\K[^"]*' ${osmfile} | tr -d '\n')
	local wayts=$(grep -oP '<way(.*) timestamp="\K[^"]*' ${osmfile} | tr -d '\n')

	#[ "$name" == "" ] && name=${wayid}

	echo "Extract coordinates from $wayid" >&2

	grep "<node" ${osmfile} | while read -r line; do
	#	echo "$line"
		visible=$(echo ${line} | grep -oP '<node(.*) visible="\K[^"]*' | tr -d '\n')
		[ "${visible}" != "true" ] && continue
		id=$(echo ${line} | grep -oP '<node(.*) id="\K[^"]*' | tr -d '\n')
		ts=$(echo ${line} | grep -oP '<node(.*) timestamp="\K[^"]*' | tr -d '\n')
		lat=$(echo ${line} | grep -oP '<node(.*) lat="\K[^"]*' | tr -d '\n')
		lon=$(echo ${line} | grep -oP '<node(.*) lon="\K[^"]*' | tr -d '\n')
		echo "$id $lat,$lon $ts" >> ${NODEFILE}
	done

	declare -A coordinates
	while read -r line; do
		id=$(echo $line | cut -d ' ' -f1)
		ll=$(echo $line | cut -d ' ' -f2)
		coordinates["${id}"]="$ll"
	done < ${NODEFILE}

	echo "Check boundary" >&2
	local latmin latmax lonmin lonmax lastts
	read -r -d '' latmin latmax lonmin lonmax lastts <<< $(getBoundary ${NODEFILE} )
	#echo $latmin $latmax $lonmin $lonmax $lastts >&2

	lastts=$(echo -e "${lastts}\n${wayts}" | sort -r | head -n 1)

	rm -vf ${NODEFILE} >&2

	declare -a nodes
	local nodes=( `grep -oP '<nd(.*) ref="\K[^"]*' ${osmfile}` )

	if [ "$isReverse" == "true" ]; then
		echo "Reverse nodes..." >&2
		min=0
		max=$(( ${#nodes[@]} -1 ))
		while [[ $min -lt $max ]]; do
			# Swap current first and last elements
			x="${nodes[$min]}"
			nodes[$min]="${nodes[$max]}"
			nodes[$max]="$x"
			# Move closer
			(( min++, max-- ))
		done
	fi;

	echo "Last timestamp="${lastts} >&2

#	echo "Name=$name" >&2
#	echo "Author=$author" >&2
#	[ "$desc" != "" ] && echo "Description: $desc"
#	[ "$note" != "" ] && echo "Note: $note"
	
	local year=$(date +%Y)
	local gpx_metadata="\t<metadata>\n\t</metadata>"
	[ "${name}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<name>${name}</name>\n\t</metadata>"}
	[ "${desc}${note}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<desc>${desc}${note}</desc>\n\t</metadata>"}
#	[ "${author}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<author>\n\t\t\t<name>${author}</name>\n\t\t</author>\n\t</metadata>"}
	gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<author>\n\t\t\t<name>rel2gpx</name>\n\t\t</author>\n\t</metadata>"}
	gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<copyright author=\"Â© OpenStreetMap contributors\">\n\t\t\t<year>${year}</year>\n\t\t\t<license>https://opendatacommons.org/licenses/odbl/</license>\n\t\t</copyright>\n\t</metadata>"}
	[ "${website}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<link href=\"${website}\"/>\n\t</metadata>"}
	[ "${lastts}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<time>${lastts}</time>\n\t</metadata>"}
	gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<bounds minlat=\"${latmin}\" maxlat=\"${latmax}\" minlon=\"${lonmin}\" maxlon=\"${lonmax}\"/>\n\t</metadata>"}

	local gpx_trkhead="<trk>"
	[ "$name" != "" ] && gpx_trkhead="${gpx_trkhead}\n\t\t<name>$name</name>"
	gpx_trkhead="${gpx_trkhead}\n\t\t<src>OpenStreetMap</src>"
	gpx_trkhead="${gpx_trkhead}\n\t\t<link href=\"https://www.openstreetmap.org/way/${wayid}\"><text>${wayid}</text></link>"
	gpx_trkhead="${gpx_trkhead}\n\t\t<type>${type1}</type>"
	
	echo -e "${gpx_start}" > ${gpxFile}
	echo -e "${xsiDefault}" >> ${gpxFile}

	echo -e "${gpx_metadata}" >> ${gpxFile}
	echo -e "\t${gpx_trkhead}" >> ${gpxFile}
	echo -e "\t\t<trkseg>" >> ${gpxFile}
	for ((i = 0; i < ${#nodes[@]}; i++)); do
		n=${nodes[$i]};
		coordinate=${coordinates[$n]};
		echo -e "\t\t\t<trkpt lat=\"${coordinate%,*}\" lon=\"${coordinate##*,}\"/>" >> ${gpxFile}
	done
	echo -e "\t\t</trkseg>" >> ${gpxFile}
	echo -e "\t</trk>" >> ${gpxFile}
	echo -e "</gpx>" >> ${gpxFile}
	echo ${#nodes[@]}"x coordinates." >&2
	
	gpxValidate ${gpxFile}
	if [ $? -eq 0 ]; then
		cat ${gpxFile}
		echo "GPX valid" >&2
		rm ${gpxFile}
	else
		cat ${gpxFile} >&2
		rm ${gpxFile}
		echo "BAD validation!" >&2
		return 1;
	fi;
}

function generateRelation {
	local relid=$1
	local osmfile=$(downloadOsmPart relation/${relid})
	[ "$osmfile" == "" ] && return 1
	local patternTrkSeg="/<trkseg>/{flag=1; next} /<\/trkseg>/{flag=0} flag"
	local patternTrk="/<trk>/{flag=1; next} /<\/trk>/{flag=0} flag"
	
	local name=$(grep -oP '<tag(.*) k=\"name\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local desc=$(grep -oP '<tag(.*) k=\"description\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local note=$(grep -oP '<tag(.*) k=\"note\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local website=$(grep -oP '<tag(.*) k=\"website\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local colour=$(grep -oP '<tag(.*) k=\"colour\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local distance=$(grep -oP '<tag(.*) k=\"distance\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local author=$(grep -oP '<rel(.*) user="\K[^"]*' ${osmfile} | tr -d '\n')
	local relts=$(grep -oP '<rel(.*) timestamp="\K[^"]*' ${osmfile} | tr -d '\n')
	local operator=$(grep -oP '<tag(.*) k=\"operator\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local type=$(grep -oP '<tag(.*) k=\"type\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local oneway=$(grep -oP '<tag(.*) k=\"oneway\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')

	echo "Extract ways from ${osmfile}" >&2
	local WAYSFILE=$(mktemp) || exit 1
	grep '<member.*type=\"way\".*ref=' ${osmfile} > ${WAYSFILE}

#	declare -A ways
	local ways=()
	[ -d "${TMPDIR}/gpx" ] || mkdir -p "${TMPDIR}/gpx" || exit 1
	while read -r line; do
		#echo "$line"
		local refway=$(echo -n $line | grep -oP '<member(.*) type=\"way\"(.*) ref="\K[^"]*')
		local role=$(echo -n $line | grep -oP '<member(.*) type=\"way\"(.*) role="\K[^"]*')
		local gpxFile="${TMPDIR}/gpx/${refway}-${role}.gpx"
		checkFileTime ${gpxFile} || generateWay ${refway} ${role} > ${gpxFile}
		echo "GPX: ${gpxFile}" >&2
		ways+=(${gpxFile})
	done < ${WAYSFILE}
	rm -vf ${WAYSFILE} >&2
	echo "obejctid=${objectid} relid=${relid}" >&2
	local rels=()
	if [ "${objectid}" == "${relid}" ] && [ "${type}" == "network" ]; then
		echo "Relations of ${relid}" >&2 
		#test -d "gpx/${objectid}" || mkdir -p "gpx/${objectid}"
		while IFS= read -r line; do
			echo -e "\nExecute: $0 rel${line}" >&2
			local gpxFile2="${TMPDIR}/gpx/${line}.gpx"
			echo "gpxFile2=${gpxFile2}" >&2
			generateRelation ${line} > ${gpxFile2}
			echo "Add relation ${gpxFile2}" >&2
			zip -uv ${objectid}.zip ${gpxFile2} >&2
			rels+=(${gpxFile2})
		done < <(grep -oP '<member(.*) type=\"relation\"(.*) ref="\K[^"]*' ${osmfile})
#	else
#		echo "No equals obejctid=${objectid} != relid=${relid}"
	fi;

	if [ ${#ways[@]} -eq 0 ] && [ ${#rels[@]} -eq 0 ]; then
		echo "Empty ways and relations..." >&2
		return 1;
	fi;
	
	local RELFILE=$(mktemp) || exit 1

#	for wayfile in "${ways[@]}"; do
#		echo "way=$wayfile"
#	done;
#	for wayfile in "${rels[@]}"; do
#		echo "rels=$wayfile"
#	done;

	for wayfile in "${ways[@]}"; do
		ts=$(sed -n "/<metadata/,/<\/metadata>/p" "${wayfile}" | grep "<time>" | sed -e "s/<time>\(.*\)<\/time>/\1/" | tr -d '\t')
		echo "Extract <time> from ${wayfile} is ${ts}" >&2
		minlat=$(sed -n "/<metadata/,/<\/metadata>/p" "${wayfile}" | grep -oP '<bounds(.*) minlat="\K[^"]*')
		maxlat=$(sed -n "/<metadata/,/<\/metadata>/p" "${wayfile}" | grep -oP '<bounds(.*) maxlat="\K[^"]*')
		minlon=$(sed -n "/<metadata/,/<\/metadata>/p" "${wayfile}" | grep -oP '<bounds(.*) minlon="\K[^"]*')
		maxlon=$(sed -n "/<metadata/,/<\/metadata>/p" "${wayfile}" | grep -oP '<bounds(.*) maxlon="\K[^"]*')
		echo "${wayfile##*\/} ${minlat},${minlon} ${ts}" >> ${RELFILE} 
		echo "${wayfile##*\/} ${maxlat},${maxlon} ${ts}" >> ${RELFILE} 
	done
	for wayfile in "${rels[@]}"; do
		ts=$(sed -n "/<metadata/,/<\/metadata>/p" "${wayfile}" | grep "<time>" | sed -e "s/<time>\(.*\)<\/time>/\1/" | tr -d '\t')
		echo "Extract <time> from ${wayfile} is ${ts}" >&2
		minlat=$(sed -n "/<metadata/,/<\/metadata>/p" "${wayfile}" | grep -oP '<bounds(.*) minlat="\K[^"]*')
		maxlat=$(sed -n "/<metadata/,/<\/metadata>/p" "${wayfile}" | grep -oP '<bounds(.*) maxlat="\K[^"]*')
		minlon=$(sed -n "/<metadata/,/<\/metadata>/p" "${wayfile}" | grep -oP '<bounds(.*) minlon="\K[^"]*')
		maxlon=$(sed -n "/<metadata/,/<\/metadata>/p" "${wayfile}" | grep -oP '<bounds(.*) maxlon="\K[^"]*')
		echo "${wayfile##*\/} ${minlat},${minlon} ${ts}" >> ${RELFILE} 
		echo "${wayfile##*\/} ${maxlat},${maxlon} ${ts}" >> ${RELFILE} 
	done

	#echo "Max date "` TZ='Z' date --date="@$ts" +'%FT%X%ZZ'`
	read -r -d '' latmin latmax lonmin lonmax lastts <<< $(getBoundary ${RELFILE} )
	rm ${RELFILE} >&2
	lastts=$(echo -e "${lastts}\n${relts}" | sort -r | head -n 1)
	echo "Last update "`date -d "${lastts}" +"%F %T %Z"` >&2

	local year=$(date +%Y)
	local gpx_metadata="\t<metadata>\n\t</metadata>"
	[ "${name}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<name>${name}</name>\n\t</metadata>"}
	[ "${desc}${note}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<desc>${desc}${note}</desc>\n\t</metadata>"}
#	[ "${author}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<author>\n\t\t\t<name>${author}</name>\n\t\t</author>\n\t</metadata>"}
	gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<author>\n\t\t\t<name>$USER</name>\n\t\t</author>\n\t</metadata>"}
	gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<copyright author=\"Â© OpenStreetMap contributors\">\n\t\t\t<year>${year}</year>\n\t\t\t<license>https://opendatacommons.org/licenses/odbl/</license>\n\t\t</copyright>\n\t</metadata>"}
	[ "${website}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<link href=\"${website}\"/>\n\t</metadata>"}
	[ "${lastts}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<time>${lastts}</time>\n\t</metadata>"}
	[ "${name}" != "" ] && echo "Name: ${name}" >&2
	[ "${operator}" != "" ] && echo "Operator: ${operator}" >&2
	[ "${network}" != "" ] && echo "Network: ${network}" >&2
	
	local extensions;

	if [ "${colour}" != "" ]; then
		if [ "${garmin}" == true ]; then
			colour=$(checkGarminColour ${colour})
			if [ $? -eq 0 ]; then
				echo "Set Garmin color: ${colour}" >&2
				local gpxcolor="<gpxx:DisplayColor>${colour}</gpxx:DisplayColor>"
				extension="\t\t\t<gpxx:TrackExtension ${nameSpaceGarmin}>\n\t\t\t\t${gpxcolor}\n\t\t\t</gpxx:TrackExtension>"
			fi;
		else
			echo "Color style: ${colour}" >&2
			colour=${colour,,}
			echo ${colour} | grep "^#\?[0-9a-f]\{6\}$" > /dev/null
			if [ $? -ne 0 ]; then
				colour=${colorMap[${colour}]}
			else
				colour=${colour#\#}
			fi;
			if [ "${colour}" != "" ]; then
				echo "Set color: "${colour,,} >&2
				local styleColor="<gpx_style:color>${colour,,}</gpx_style:color>"
				extension="\t\t\t<gpx_style:line ${nameSpaceStyle}>\n\t\t\t\t${styleColor}\n\t\t\t</gpx_style:line>"
			fi;
		fi;
	fi;
	if [ "${oneway}" == "yes" ]; then
		local extension2="\t\t\t<osminfo:way ${nameSpaceSla}>\n\t\t\t\t<osminfo:oneway>true</osminfo:oneway>\n\t\t\t</osminfo:way>"
		if [ "${extension}" = "" ]; then
			extension="${extension}${extension2}"
		else
			extension="${extension}\n${extension2}"
		fi;
	fi;
	gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<bounds minlat=\"${latmin}\" maxlat=\"${latmax}\" minlon=\"${lonmin}\" maxlon=\"${lonmax}\"/>\n\t</metadata>"}

	local gpxrel=$(mktemp --tmpdir="./")
	
	echo "Create temporaly file $gpxrel" >&2
	echo -e "${gpx_start}" > ${gpxrel}
	echo -e "${xsiDefault}" >> ${gpxrel}
	
	echo -e "${gpx_metadata}" >> ${gpxrel}

	if [ ${#ways[@]} -ne 0 ]; then

		echo -e "\t<trk>" >> ${gpxrel}
		[ "${name}" != "" ] && echo -e "\t\t<name>${name}</name>" >> ${gpxrel}
		[ "${note}" != "" ] && echo -e "\t\t<cmt>${note}</cmt>" >> ${gpxrel}
		[ "${desc}" != "" ] && echo -e "\t\t<desc>${desc}</desc>" >> ${gpxrel}
		echo -e "\t\t<src>OpenStreetMap</src>" >> ${gpxrel}
		if [ "${website}" != "" ]; then
			echo -e "\t\t<link href=\"${website}\"><text>${name}</text></link>" >> ${gpxrel}
		else
			echo -e "\t\t<link href=\"https://www.openstreetmap.org/relation/${relid}\"><text>${relid}</text></link>" >> ${gpxrel}
		fi;
		echo -e "\t\t<number>${relid}</number>" >> ${gpxrel}
		echo -e "\t\t<type>path</type>" >> ${gpxrel}
		[ "${extension}" != "" ] && echo -e "\t\t<extensions>\n${extension}\n\t\t</extensions>" >> ${gpxrel}
		echo -e "\t\t<trkseg>" >> ${gpxrel}
# https://stackoverflow.com/questions/38972736/how-to-print-lines-between-two-patterns-inclusive-or-exclusive-in-sed-awk-or
		for wayfile in "${ways[@]}"; do
			#echo "A3 ${wayfile}" >&2
			awk "${patternTrkSeg}" "${wayfile}" | head -n -1 >> ${gpxrel}
		done
		awk "${patternTrkSeg}" "${wayfile}" | tail -n 1 >> ${gpxrel}
		echo -e "\t\t</trkseg>" >> ${gpxrel}
		echo -e "\t</trk>" >> ${gpxrel}
	fi;

#	echo "2. Wait for keypressed." >&2 && read -n 1 -t 15 a	
	if [ ${#rels[@]} -ne 0 ]; then
	#	awk 'flag{ if (/PAT2/){printf "%s", buf; flag=0; buf=""} else buf = buf $0 ORS}; /PAT1/{flag=1}' file
		for wayfile in "${rels[@]}"; do
			echo "Extract <trk> from ${wayfile}" >&2
			echo -e "\t<trk>" >> ${gpxrel}
			awk "${patternTrk}" "${wayfile}" >> ${gpxrel}
			echo -e "\t</trk>" >> ${gpxrel}
		done
	fi;
	echo "</gpx>" >> ${gpxrel}

	# Check distance
	if [ "${checkDistance}" == "true" ]; then
		local masterdist=0
		local c=0
		local endcoo;
		local coo;
		for wayfile in "${ways[@]}"; do
		while IFS= read -r line; do
	#		echo "line '${line}'"
			if [[ $line == *"<trkpt"* ]]; then
				lat=$(echo ${line} | grep -oP '<trkpt(.*) lat="\K[^"]*' | tr -d '\n')
				lon=$(echo ${line} | grep -oP '<trkpt(.*) lon="\K[^"]*' | tr -d '\n')
				coo="${lat},${lon}"
				[ "${lastcoo}" != "" ] && subdist=$(addFloat ${subdist:-0} $(distance ${coo} ${lastcoo}))
				lastcoo=${coo}
				if [ "$endcoo" != "" ]; then
					[ "${coo}" != "${endcoo}" ] && echo -e "Incorrect start coordinate ${coo} of connection on '${wayfile##*\/}' (part $c)!" >&2
					unset endcoo
				fi;
			elif [[ $line == *"<trkseg>"* ]]; then
				subdist=0
				c=$(($c + 1))
	#			echo "START subdist=${subdist}" >&2
			elif [[ $line == *"</trkseg>"* ]]; then
				masterdist=$(addFloat ${masterdist:-0} ${subdist:-0})
				endcoo=$lastcoo
				echo "$c / ${#ways[@]} ${wayfile##*\/} ${masterdist} km"
			fi;
		done < <(sed -n "/<trkseg>/,/<\/trkseg>/p" "${wayfile}")
		done
		echo "GPX distance $masterdist km (${distance})"
		[ ${distance:-0} == "0" ] || echo "Distance in OSM relation($relid) is $distance km (diff "$(bc -l <<<"scale=1;100*${masterdist:-0}/${distance}")"%)"
	fi;
	gpxValidate ${gpxrel}
	if [ $? -eq 0 ]; then
		cat ${gpxrel}
		rm ${gpxrel}
		echo "GPX valid" >&2
	else
		cat ${gpxrel} >&2
		rm ${gpxrel}
		echo "BAD validation!" >&2
		return 1;
	fi;
}

echo "Generate relation id=${objectid}" >&2
generateRelation ${objectid} && exit 0;

echo "Generate way id=${objectid}" >&2
generateWay ${objectid} ${reverse} 

#	gpxfile="${wayid}.gpx"
#		echo "GPX to file> '${gpxfile}'" >&2
#		exec 3<&-
#	Open STDOUT as $LOG_FILE file for read and write.
#		exec 3<>${gpxfile}
#		echo "Create GPX file ${gpxfile}" >&2

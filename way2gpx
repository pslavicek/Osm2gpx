#!/bin/bash

#trap 'rm -rf "${TMPDIR}"' EXIT
export LC_NUMERIC=C

# Close STDERR FD
#exec 2<&-
# Open STDOUT as $LOG_FILE file for read and write.
#exec 2<>/tmp/index.log


osmurl="https://www.openstreetmap.org/api/0.6"
#TMPDIR=$(mktemp -d) || exit 1
TMPDIR="/tmp/way2gpx"
#echo "Our temp file is ${TMPDIR}" >&2

function distance () {
	local lat1=$(bc -l <<< "${1%,*} * 0.01745329251994329444")
	local lat2=$(bc -l <<< "${2%,*} * 0.01745329251994329444")
        local dlon=`bc -l <<< "(${2##*,} - ${1##*,}) * 0.01745329251994329444"`
	local distance=$(bc -l <<< "s($lat1) * s($lat2) + c($lat1) * c($lat2) * c($dlon)")
	distance=$(bc -l <<<"1.5707963267948965 - a($distance / sqrt(1 - $distance * $distance))")
	distance=$(bc -l <<<"scale=4; ($distance * 6371 + 0.00005) / 1")
	echo $distance | awk '{printf "%1.4f\n", $1}'
}

function addFloat {
	num=$(bc -l <<<"scale=4; ($1 + $2)")
	echo $num | awk '{printf "%1.4f\n", $1}'
}

function downloadOsmPart {
	local file="${TMPDIR}/${1}.xml"
	file=${file/\/full/-full}
	[ -d ${file%/*} ] || mkdir -p ${file%/*}
	if [ ! -e ${file} ]; then
		http=$(curl --silent --head "${osmurl}/${1}" | grep "HTTP\/[1-2].* [2\d\d]")
		if [ $? -ne 0 ]; then
        		echo -e "ERROR ${osmurl}/${1}\n url not found!" >&2
        		return 1;
        	fi
        	echo "Download ... ${osmurl}/${1}" >&2
        	curl --silent "${osmurl}/${1}" -o ${file}
        	local status=$?

	fi;
	ls -la ${file} >&2
	ls ${file}
}

while [ $# -ne 0 ]; do
	arg="$1"
	case "${arg}" in
		--output|-o)
			shift;
			gpxfile=$1
			;;
		--outputv|-ov)
			shift;
			gpxfile=$1
			validate=true
			;;
		--reverse|-r)
			reverse=true
			;;
		rel*|r*)
			objectid=${1/"rel"/"r"}
			objectid=${objectid:1}
			type="rel"
			;;
		way*|w*)
			objectid=${1/"way"/"w"}
			objectid=${objectid:1}
			type="way"
			;;
		*)
			objectid=${1}
			type="way"
			;;
	esac
	shift
done

read -r -d '' gpx_start << EOM1
<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<gpx version="1.1"
	creator="way2gpx - https://osm.slavics.cz"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.topografix.com/GPX/1/1"
	xsi:schemaLocation="http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd">
EOM1

if [ -z "${objectid}" ]; then
	echo -e "$0 [--reverse|-r] [--output[v]|-o[v] file.gpx] [rel|r][way|w]numberofobject" >&2
	echo -e "\tconvert osm way to gpx" >&2
	echo -e "\t--reverse|-r\t: reverse path (only way)" >&2
	echo -e "\t--output|-o gpxfile\t: export to file" >&2
	echo -e "\t--outputv|-ov gpxfile\t: export to file with GPX validation" >&2
	echo -e "\trel|r\t: numberofobject is relation" >&2
	echo -e "\tway|w\t: numberofobject is way (default)" >&2
	echo -e "\nExample\t$0 -r 327119963" >&2
	echo -e "\t$0 rel6452264" >&2
	exit 1;
fi

function checkGarminColour {
	local colour=${1,,}
	colour=${colour^}
	local arraycolor=(Black DarkRed DarkGreen DarkYellow DarkBlue DarkMagenta DarkCyan LightGray DarkGray Red Green Yellow Blue Magenta Cyan White Transparent)
	if [[ " ${arraycolor[@]} " =~ " ${colour} " ]]; then
		echo -e $colour
		return 0;
	else
		return 1;
	fi;
}

function getBoundary {
	local file=$1

	# Boundary
	cut -d ' ' -f2 "${file}" | sort -t ',' -k1 | head -n 1 | cut -d ',' -f1
	cut -d ' ' -f2 "${file}" | sort -r -t ',' -k1 | head -n 1 | cut -d ',' -f1
	cut -d ' ' -f2 "${file}" | sort -t ',' -k2 | head -n 1 | cut -d ',' -f2
	cut -d ' ' -f2 "${file}" | sort -r -t ',' -k2 | head -n 1 | cut -d ',' -f2

	# Last Timestamp
	sort "${file}" -r -k 3 | head -n 1 | cut -d ' ' -f 3
}

function generateWay {
	local wayid=$1
	local isReverse=$2
	echo -en "\n" >&2
	local osmfile=$(downloadOsmPart way/${wayid}/full)
	[ "$osmfile" == "" ] && exit 1

	echo "Extract data from '${osmfile}' $isReverse" >&2
	isReverse=${isReverse/"backward"/"true"}
	
	local NODEFILE=$(mktemp) || exit 1

	local name=$(grep -oP '<tag(.*) k=\"name\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local desc=$(grep -oP '<tag(.*) k=\"description\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local note=$(grep -oP '<tag(.*) k=\"note\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local type1=$(grep -oP '<tag(.*) k=\"highway\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local website=$(grep -oP '<tag(.*) k=\"website\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local colour=$(grep -oP '<tag(.*) k=\"colour\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local author=$(grep -oP '<way(.*) user="\K[^"]*' ${osmfile} | tr -d '\n')
	local wayts=$(grep -oP '<way(.*) timestamp="\K[^"]*' ${osmfile} | tr -d '\n')

	#[ "$name" == "" ] && name=${wayid}

	echo "Extract coordinates from $wayid" >&2

	grep "<node" ${osmfile} | while read -r line; do
	#	echo "$line"
		visible=$(echo ${line} | grep -oP '<node(.*) visible="\K[^"]*' | tr -d '\n')
		[ "${visible}" != "true" ] && continue
		id=$(echo ${line} | grep -oP '<node(.*) id="\K[^"]*' | tr -d '\n')
		ts=$(echo ${line} | grep -oP '<node(.*) timestamp="\K[^"]*' | tr -d '\n')
		lat=$(echo ${line} | grep -oP '<node(.*) lat="\K[^"]*' | tr -d '\n')
		lon=$(echo ${line} | grep -oP '<node(.*) lon="\K[^"]*' | tr -d '\n')
		echo "$id $lat,$lon $ts" >> ${NODEFILE}
	done

	declare -A coordinates
	while read -r line; do
		id=$(echo $line | cut -d ' ' -f1)
		ll=$(echo $line | cut -d ' ' -f2)
		coordinates["${id}"]="$ll"
	done < ${NODEFILE}

	echo "Check boundary" >&2
	local latmin latmax lonmin lonmax lastts
	read -r -d '' latmin latmax lonmin lonmax lastts <<< $(getBoundary ${NODEFILE} )
	#echo $latmin $latmax $lonmin $lonmax $lastts >&2

	lastts=$(echo -e "${lastts}\n${wayts}" | sort -r | head -n 1)

	rm -vf ${NODEFILE} >&2

	declare -a nodes
	local nodes=( `grep -oP '<nd(.*) ref="\K[^"]*' ${osmfile}` )

	if [ "$isReverse" == "true" ]; then
		echo "Reverse nodes..." >&2
		min=0
		max=$(( ${#nodes[@]} -1 ))
		while [[ $min -lt $max ]]; do
			# Swap current first and last elements
			x="${nodes[$min]}"
			nodes[$min]="${nodes[$max]}"
			nodes[$max]="$x"
			# Move closer
			(( min++, max-- ))
		done
	fi;

	echo "Last timestamp="${lastts} >&2

#	echo "Name=$name" >&2
#	echo "Author=$author" >&2
#	[ "$desc" != "" ] && echo "Description: $desc"
#	[ "$note" != "" ] && echo "Note: $note"
	
	local year=$(date +%Y)
	local gpx_metadata="\t<metadata>\n\t</metadata>"
	[ "${name}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<name>${name}</name>\n\t</metadata>"}
	[ "${desc}${note}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<desc>${desc}${note}</desc>\n\t</metadata>"}
	[ "${author}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<author>\n\t\t\t<name>${author}</name>\n\t\t</author>\n\t</metadata>"}
	gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<copyright author=\"${author}\">\n\t\t\t<year>${year}</year>\n\t\t\t<license>https://opendatacommons.org/licenses/odbl/</license>\n\t\t</copyright>\n\t</metadata>"}
	[ "${website}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<link href=\"${website}\"/>\n\t</metadata>"}
	[ "${lastts}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<time>${lastts}</time>\n\t</metadata>"}
	gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<bounds minlat=\"${latmin}\" maxlat=\"${latmax}\" minlon=\"${lonmin}\" maxlon=\"${lonmax}\"/>\n\t</metadata>"}

	gpx_trkhead="<trk>"
	[ "$name" != "" ] && gpx_trkhead="${gpx_trkhead}\n\t\t<name>$name</name>"
	gpx_trkhead="${gpx_trkhead}\n\t\t<src>OpenStreetMap</src>"
	gpx_trkhead="${gpx_trkhead}\n\t\t<link href=\"https://www.openstreetmap.org/way/${wayid}\"><text>${wayid}</text></link>"
	gpx_trkhead="${gpx_trkhead}\n\t\t<type>${type1}</type>"
		
	colour=$(checkGarminColour ${colour})
	if [ $? -eq 0 ]; then
		echo "Set color: ${colour}" >&2
		gpx_trkhead="${gpx_trkhead}\n\t\t<extensions>\n\t\t\t<gpxx:TrackExtension xmlns:gpxx=\"http://www.garmin.com/xmlschemas/GpxExtensions/v3\">\n\t\t\t\t<gpxx:DisplayColor>${colour}</gpxx:DisplayColor>\n\t\t\t</gpxx:TrackExtension>\n\t\t</extensions>"
	fi;

	echo -e "${gpx_start}" 
	echo -e "${gpx_metadata}"
	echo -e "\t${gpx_trkhead}"
	echo -e "\t\t<trkseg>"

	for ((i = 0; i < ${#nodes[@]}; i++)); do
		n=${nodes[$i]};
		coordinate=${coordinates[$n]};
		echo -e "\t\t\t<trkpt lat=\"${coordinate%,*}\" lon=\"${coordinate##*,}\"/>"
		
		if [ $i -ne 0 ]; then
			dist=$(distance $lastcoo ${coordinates[$n]})
			sumdist=$(echo "${sumdist:-0} + $dist" | bc -l)
			#echo " $dist $sumdist"
		fi;
		lastcoo=${coordinate}
	done
	echo -e "\t\t</trkseg>"
	echo -e "\t</trk>"
	echo -e "</gpx>"
	echo $sumdist | awk '{printf "Distance %1.4f km\n", $1}' >&2
}

function generateRelation {
	local relid=$1
	local osmfile=$(downloadOsmPart relation/${relid})
	[ "$osmfile" == "" ] && exit 1
	local patternTrkSeg="/<trkseg>/{flag=1; next} /<\/trkseg>/{flag=0} flag"
	
	local name=$(grep -oP '<tag(.*) k=\"name\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local desc=$(grep -oP '<tag(.*) k=\"description\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local note=$(grep -oP '<tag(.*) k=\"note\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local website=$(grep -oP '<tag(.*) k=\"website\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local colour=$(grep -oP '<tag(.*) k=\"colour\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local distance=$(grep -oP '<tag(.*) k=\"distance\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local author=$(grep -oP '<rel(.*) user="\K[^"]*' ${osmfile} | tr -d '\n')
	local relts=$(grep -oP '<rel(.*) timestamp="\K[^"]*' ${osmfile} | tr -d '\n')
	local operator=$(grep -oP '<tag(.*) k=\"operator\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local network=$(grep -oP '<tag(.*) k=\"network\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')

	echo "Extract ways from ${osmfile}" >&2
	local WAYSFILE=$(mktemp) || exit 1
	grep '<member.*type=\"way\".*ref=' ${osmfile} > ${WAYSFILE}

#	declare -A ways
	ways=()
	[ -d "${TMPDIR}/gpx" ] || mkdir -p "${TMPDIR}/gpx" || exit 1
	while read -r line; do
		#echo "$line"
		wid=$(echo -n $line | grep -oP '<member(.*) type=\"way\"(.*) ref="\K[^"]*')
		role=$(echo -n $line | grep -oP '<member(.*) type=\"way\"(.*) role="\K[^"]*')
		[ ! -e "${TMPDIR}/gpx/${wid}-${role}.gpx" ] && generateWay ${wid} ${role} > "${TMPDIR}/gpx/${wid}-${role}.gpx"
		echo "GPX: ${TMPDIR}/gpx/${wid}.gpx" >&2
		#cat "${TMPDIR}/gpx/${wid}.gpx"
		ways+=("${TMPDIR}/gpx/${wid}-${role}.gpx")
	done < ${WAYSFILE}
	rm -vf ${WAYSFILE} >&2 
	if [ ${#ways[@]} -eq 0 ]; then
		echo "Empty ways" >&2 
		#grep '<member.*type=\"relation\".*ref=' ${osmfile} >&2
		while IFS= read -r line; do
			echo "$0 rel${line}"
		done < <(grep -oP '<member(.*) type=\"relation\"(.*) ref="\K[^"]*' ${osmfile})
		return 1;
	fi
	local RELFILE=$(mktemp) || exit 1
	for widfile in "${ways[@]}"; do
		#echo "Extract <time> from ${widfile}" >&2
		ts=$(sed -n "/<metadata/,/<\/metadata>/p" "${widfile}" | grep "<time>" | sed -e "s/<time>\(.*\)<\/time>/\1/" | tr -d '\t')
		#<bounds minlat="50.4102420" maxlat="50.4117190" minlon="14.5725041" maxlon="14.5754772"/>
		minlat=$(sed -n "/<metadata/,/<\/metadata>/p" "${widfile}" | grep -oP '<bounds(.*) minlat="\K[^"]*')
		maxlat=$(sed -n "/<metadata/,/<\/metadata>/p" "${widfile}" | grep -oP '<bounds(.*) maxlat="\K[^"]*')
		minlon=$(sed -n "/<metadata/,/<\/metadata>/p" "${widfile}" | grep -oP '<bounds(.*) minlon="\K[^"]*')
		maxlon=$(sed -n "/<metadata/,/<\/metadata>/p" "${widfile}" | grep -oP '<bounds(.*) maxlon="\K[^"]*')
		echo "${widfile##*\/} ${minlat},${minlon} ${ts}" >> ${RELFILE} 
		echo "${widfile##*\/} ${maxlat},${maxlon} ${ts}" >> ${RELFILE} 
	done
	#echo "Max date "` TZ='Z' date --date="@$ts" +'%FT%X%ZZ'`
	read -r -d '' latmin latmax lonmin lonmax lastts <<< $(getBoundary ${RELFILE} )
	rm ${RELFILE} >&2
	lastts=$(echo -e "${lastts}\n${relts}" | sort -r | head -n 1)
	echo "Last update "`date -d "${lastts}" +"%F %T %Z"` >&2
	local year=$(date +%Y)
	local gpx_metadata="\t<metadata>\n\t</metadata>"
	[ "${name}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<name>${name}</name>\n\t</metadata>"}
	[ "${desc}${note}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<desc>${desc}${note}</desc>\n\t</metadata>"}
	[ "${author}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<author>\n\t\t\t<name>${author}</name>\n\t\t</author>\n\t</metadata>"}
	gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<copyright author=\"${author}\">\n\t\t\t<year>${year}</year>\n\t\t\t<license>https://opendatacommons.org/licenses/odbl/</license>\n\t\t</copyright>\n\t</metadata>"}
	[ "${website}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<link href=\"${website}\"/>\n\t</metadata>"}
	[ "${lastts}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<time>${lastts}</time>\n\t</metadata>"}
	[ "${name}" != "" ] && echo "Name: ${name}" >&2
	[ "${operator}" != "" ] && echo "Operator: ${operator}" >&2
	[ "${network}" != "" ] && echo "Operator: ${network}" >&2
	colour=$(checkGarminColour ${colour})
	if [ $? -eq 0 ]; then
		echo "Color: ${colour}" >&2
		extension="<extensions>\n\t\t\t<gpxx:TrackExtension xmlns:gpxx=\"http://www.garmin.com/xmlschemas/GpxExtensions/v3\">\n\t\t\t\t<gpxx:DisplayColor>${colour}</gpxx:DisplayColor>\n\t\t\t</gpxx:TrackExtension>\n\t\t</extensions>"
#		gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t${extension}\n\t</metadata>"}
	fi;

	gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<bounds minlat=\"${latmin}\" maxlat=\"${latmax}\" minlon=\"${lonmin}\" maxlon=\"${lonmax}\"/>\n\t</metadata>"}


	echo -e "${gpx_start}" > "${relid}.gpx"
	echo -e "${gpx_metadata}" >> "${relid}.gpx"
	local parted=false;
	if [ "${parted}" == "true" ]; then
		echo "Parted" >&2
#	else
		local start=$(awk "${patternTrkSeg}" "${ways[0]}" | head -n 1 | tr -d "\t/")
		start=${start/"trkpt"/"wpt"}
		echo -e "\t${start}\n\t\t<name>Start</name>\n\t</wpt>" >> "${relid}.gpx"
		local end=$(awk "${patternTrkSeg}" "${ways[-1]}" | tail -n 1 | tr -d "\t/")
		end=${end/"trkpt"/"wpt"}
		echo -e "\t${end}\n\t\t<name>End</name>\n\t</wpt>" >> "${relid}.gpx"
	fi;
	
	echo -e "\t<trk>" >> "${relid}.gpx"
	[ "${name}" != "" ] && echo -e "\t\t<name>${name}</name>" >> "${relid}.gpx"
	[ "${note}" != "" ] && echo -e "\t\t<cmt>${note}</cmt>" >> "${relid}.gpx"
	[ "${desc}" != "" ] && echo -e "\t\t<desc>${desc}</desc>" >> "${relid}.gpx"
	echo -e "\t\t<src>OpenStreetMap</src>" >> "${relid}.gpx"
	echo -e "\t\t<link href=\"https://www.openstreetmap.org/relation/${relid}\"><text>${relid}</text></link>" >> "${relid}.gpx"
	echo -e "\t\t<number>${relid}</number>" >> "${relid}.gpx"
	echo -e "\t\t<type>path</type>" >> "${relid}.gpx"
	[ "${extension}" != "" ] && echo -e "\t\t${extension}" >> "${relid}.gpx"
	if [ "${parted}" == "true" ]; then
		for widfile in "${ways[@]}"; do
			echo "Extract <trkseg> from ${widfile}" >&2
			# Include trkseg
			sed -n "/<trkseg>/,/<\/trkseg>/p" "${widfile}" >> "${relid}.gpx"
		done
	else
		echo -e "\t\t<trkseg>" >> "${relid}.gpx"
# https://stackoverflow.com/questions/38972736/how-to-print-lines-between-two-patterns-inclusive-or-exclusive-in-sed-awk-or
		for widfile in "${ways[@]}"; do
			echo "A3 ${widfile}" >&2
			awk "${patternTrkSeg}" "${widfile}" | head -n -1 >> "${relid}.gpx"
		done
		awk "${patternTrkSeg}" "${widfile}" | tail -n 1 >> "${relid}.gpx" >> "${relid}.gpx"
		echo -e "\t\t</trkseg>" >> "${relid}.gpx"
	fi;
	echo -e "\t</trk>" >> "${relid}.gpx"
	echo "</gpx>" >> "${relid}.gpx"
	
	# Check distance
	masterdist=0
	c=0
	for widfile in "${ways[@]}"; do
	while IFS= read -r line; do
#		echo "line '${line}'"
		if [[ $line == *"<trkpt"* ]]; then
			lat=$(echo ${line} | grep -oP '<trkpt(.*) lat="\K[^"]*' | tr -d '\n')
			lon=$(echo ${line} | grep -oP '<trkpt(.*) lon="\K[^"]*' | tr -d '\n')
			coo="${lat},${lon}"
			[ "${lastcoo}" != "" ] && subdist=$(addFloat ${subdist:-0} $(distance ${coo} ${lastcoo}))
			lastcoo=${coo}
			if [ "$endcoo" != "" ]; then
				[ "${coo}" != "${endcoo}" ] && echo -e "Incorrect start coordinate ${coo} of connection on '${widfile##*\/}' (part $c)!" >&2
				unset endcoo
			fi;
		elif [[ $line == *"<trkseg>"* ]]; then
			subdist=0
			c=$(($c + 1))
#			echo "START subdist=${subdist}" >&2
		elif [[ $line == *"</trkseg>"* ]]; then
			masterdist=$(addFloat ${masterdist:-0} ${subdist:-0})
			endcoo=$lastcoo
			echo "$c / ${#ways[@]} ${widfile##*\/} ${masterdist} km"
		fi;
	done < <(sed -n "/<trkseg>/,/<\/trkseg>/p" "${widfile}")
	done
	echo "GPX distance $masterdist km"
	[ "${distance:-0}" == "0" ] && echo "Distance in OSM relation($relid) is $distance km (diff "$(bc -l <<<"scale=1;100*${masterdist:-0}/${distance}")"%)"
	echo "${relid}.gpx"
}

if [ "${type}" == "rel" ]; then
	echo "Generate relation id=${objectid}" >&2
	generateRelation ${objectid}
else
	echo "Generate way id=${objectid}" >&2
	if [ "${gpxfile}" != "" ]; then
		generateWay ${objectid} ${reverse} > ${gpxfile}
		echo "Created GPX file ${gpxfile}"
		if [ "${validate}" == "true" ]; then
				xmllint --noout --schema http://www.topografix.com/GPX/1/1/gpx.xsd ${gpxfile} || echo "Bad validation!" >&2
		fi;
		#gpxfile="${wayid}.gpx"
#		echo "GPX to file> '${gpxfile}'" >&2
#		exec 3<&-
	#	Open STDOUT as $LOG_FILE file for read and write.
#		exec 3<>${gpxfile}
#		echo "Create GPX file ${gpxfile}" >&2
	else
		generateWay ${objectid} ${reverse}
	fi;
	
	
	
fi;







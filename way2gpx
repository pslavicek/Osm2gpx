#!/bin/bash

# Close STDERR FD
#exec 2<&-
# Open STDOUT as $LOG_FILE file for read and write.
#exec 2<>/tmp/index.log
#trap 'rm -rf "${TMPDIR}"' EXIT

osmurl="https://www.openstreetmap.org/api/0.6"
#TMPDIR=$(mktemp -d) || exit 1
TMPDIR="/tmp/way2gpx"
#echo "Our temp file is ${TMPDIR}"

function distance () {
	local lat1=$(bc -l <<< "${1%,*} * 0.01745329251994329444")
	local lat2=$(bc -l <<< "${2%,*} * 0.01745329251994329444")
        local dlon=`bc -l <<< "(${2##*,} - ${1##*,}) * 0.01745329251994329444"`
	local distance=$(bc -l <<< "s($lat1) * s($lat2) + c($lat1) * c($lat2) * c($dlon)")
	distance=$(bc -l <<<"1.5707963267948965 - a($distance / sqrt(1 - $distance * $distance))")
	distance=$(bc -l <<<"scale=4; ($distance * 6371 + 0.00005) / 1")
	echo $distance | awk '{printf "%1.4f\n", $1}'
}

function downloadOsmPart {
	local file="${TMPDIR}/${1}.xml"
	file=${file/\/full/-full}
	[ -d ${file%/*} ] || mkdir -p ${file%/*}
	
	if [ ! -e ${file} ]; then
        	echo "Download ... "${1} >&2
		curl --silent "${osmurl}/${1}" -o ${file}
	        local status=$?
		[ -e ${file} ] || status=1;
	        if [ $status -gt 0 ]; then
	        	echo "Bad download [status=$status] ${osmurl}/${1}" >&2
	        	return $status;
	        fi;
	fi;
	ls -la ${file} >&2
	ls ${file}
}

while [ $# -ne 0 ]; do
	arg="$1"
	case "${arg}" in
		--output|-o)
			shift;
			gpxfile=$1
			;;
		--outputv|-ov)
			shift;
			gpxfile=$1
			validate=true
			;;
		--reverse|-r)
			reverse=true
			;;
		rel*|r*)
			objectid=${1/"rel"/"r"}
			objectid=${objectid:1}
			type="rel"
			;;
		way*|w*)
			objectid=${1/"way"/"w"}
			objectid=${objectid:1}
			type="way"
			;;
		*)
			objectid=${1}
			type="way"
			;;
	esac
	shift
done

read -r -d '' gpx_start << EOM1
<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<gpx version="1.1"
	creator="way2gpx - https://osm.slavics.cz"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.topografix.com/GPX/1/1"
	xsi:schemaLocation="http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd">
EOM1

if [ -z "${objectid}" ]; then
	echo -e "$0 [--reverse|-r] [--output[v]|-o[v] file.gpx] [rel|r][way|w]numberofobject" >&2
	echo -e "\tconvert osm way to gpx" >&2
	echo -e "\t--reverse|-r\t: reverse path (only way)" >&2
	echo -e "\t--output|-o gpxfile\t: export to file" >&2
	echo -e "\t--outputv|-ov gpxfile\t: export to file with GPX validation" >&2
	echo -e "\trel|r\t: numberofobject is relation" >&2
	echo -e "\tway|w\t: numberofobject is way (default)" >&2
	echo -e "\nExample\t$0 -r 327119963" >&2
	echo -e "\t$0 rel6452264" >&2
	exit 1;
fi

function checkGarminColour {
	local colour=${1,,}
	colour=${colour^}
	local arraycolor=(Black DarkRed DarkGreen DarkYellow DarkBlue DarkMagenta DarkCyan LightGray DarkGray Red Green Yellow Blue Magenta Cyan White Transparent)
	if [[ " ${arraycolor[@]} " =~ " ${colour} " ]]; then
		echo -e $colour
		return 0;
	else
		return 1;
	fi;
}

function getBoundary {
	local file=$1

	# Boundary
	cut -d ' ' -f2 "${file}" | sort -t ',' -k1 | head -n 1 | cut -d ',' -f1
	cut -d ' ' -f2 "${file}" | sort -r -t ',' -k1 | head -n 1 | cut -d ',' -f1
	cut -d ' ' -f2 "${file}" | sort -t ',' -k2 | head -n 1 | cut -d ',' -f2
	cut -d ' ' -f2 "${file}" | sort -r -t ',' -k2 | head -n 1 | cut -d ',' -f2

	# Last Timestamp
	sort "${file}" -r -k 3 | head -n 1 | cut -d ' ' -f 3
}

function generateWay {
	local wayid=$1
	local isReverse=$2

	local osmfile=$(downloadOsmPart way/${wayid}/full || exit $?)

	echo "Extract data from ${osmfile}" >&2

	local NODEFILE=$(mktemp) || exit 1

	local name=$(grep -oP '<tag(.*) k=\"name\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local desc=$(grep -oP '<tag(.*) k=\"description\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local note=$(grep -oP '<tag(.*) k=\"note\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local type1=$(grep -oP '<tag(.*) k=\"highway\"(.*) v="\K[^"]*' ${osmfile} | tr -d '\n')
	local colour=$(grep -oP '<tag(.*) colour="\K[^"]*' ${osmfile} | tr -d '\n')
	local author=$(grep -oP '<way(.*) user="\K[^"]*' ${osmfile} | tr -d '\n')
	local wayts=$(grep -oP '<way(.*) timestamp="\K[^"]*' ${osmfile} | tr -d '\n')

	#[ "$name" == "" ] && name=${wayid}

	echo "Extract coordinates" >&2

	grep "<node" ${osmfile} | while read -r line; do
	#	echo "$line"
		visible=$(echo ${line} | grep -oP '<node(.*) visible="\K[^"]*' | tr -d '\n')
		[ "${visible}" != "true" ] && continue
		id=$(echo ${line} | grep -oP '<node(.*) id="\K[^"]*' | tr -d '\n')
		ts=$(echo ${line} | grep -oP '<node(.*) timestamp="\K[^"]*' | tr -d '\n')
		lat=$(echo ${line} | grep -oP '<node(.*) lat="\K[^"]*' | tr -d '\n')
		lon=$(echo ${line} | grep -oP '<node(.*) lon="\K[^"]*' | tr -d '\n')
		echo "$id $lat,$lon $ts" >> ${NODEFILE}
	done

	declare -A coordinates
	while read -r line; do
		id=$(echo $line | cut -d ' ' -f1)
		ll=$(echo $line | cut -d ' ' -f2)
		coordinates["${id}"]="$ll"
	done < ${NODEFILE}

	local latmin latmax lonmin lonmax lastts
	read -r -d '' latmin latmax lonmin lonmax lastts <<< $(getBoundary ${NODEFILE} )
	#echo $latmin $latmax $lonmin $lonmax $lastts

	lastts=$(echo -e "${lastts}\n${wayts}" | sort -r | head -n 1)

	rm -vf ${NODEFILE} >&2

	declare -a nodes
	local nodes=( `grep -oP '<nd(.*) ref="\K[^"]*' ${osmfile}` )

	if [ "$isReverse" == "true" ]; then
		echo "Reverse nodes..."
		min=0
		max=$(( ${#nodes[@]} -1 ))
		while [[ $min -lt $max ]]; do
			# Swap current first and last elements
			x="${nodes[$min]}"
			nodes[$min]="${nodes[$max]}"
			nodes[$max]="$x"
			# Move closer
			(( min++, max-- ))
		done
	fi;

	echo "Last timestamp="${lastts} >&2
	echo "Name=$name" >&2
	echo "Author=$author" >&2
	[ "$desc" != "" ] && echo "Description: $desc"
	[ "$note" != "" ] && echo "Note: $note"
	
	local year=$(date +%Y)
	local gpx_metadata="\t<metadata>\n\t</metadata>"
	[ "${name}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<name>${name}</name>\n\t</metadata>"}
	[ "${desc}${note}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<desc>${desc}${note}</desc>\n\t</metadata>"}
	[ "${author}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<author>\n\t\t\t<name>${author}</name>\n\t\t</author>\n\t</metadata>"}
	gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<copyright author=\"${author}\">\n\t\t\t<year>${year}</year>\n\t\t\t<license>https://opendatacommons.org/licenses/odbl/</license>\n\t\t</copyright>\n\t</metadata>"}
	[ "${lastts}" != "" ] && gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<time>${lastts}</time>\n\t</metadata>"}
	gpx_metadata=${gpx_metadata/"\t</metadata>"/"\t\t<bounds minlat=\"${latmin}\" maxlat=\"${latmax}\" minlon=\"${lonmin}\" maxlon=\"${lonmax}\"/>\n\t</metadata>"}

	gpx_trkhead="<trk>"
	[ "$name" != "" ] && gpx_trkhead="${gpx_trkhead}\n\t\t<name>$name</name>"
	gpx_trkhead="${gpx_trkhead}\n\t\t<src>OpenStreetMap</src>"
	gpx_trkhead="${gpx_trkhead}\n\t\t<link href=\"https://www.openstreetmap.org/way/${wayid}\"><text>Way ${wayid}</text></link>"
	gpx_trkhead="${gpx_trkhead}\n\t\t<type>${type1}</type>"
		
	colour=$(checkGarminColour ${colour})
	if [ $? -eq 0 ]; then
		echo "Set color: ${colour}" >&2
		gpx_trkhead="${gpx_trkhead}\n\t\t<extensions>\n\t\t\t<gpxx:TrackExtension xmlns:gpxx=\"http://www.garmin.com/xmlschemas/GpxExtensions/v3\">\n\t\t\t\t<gpxx:DisplayColor>${colour}</gpxx:DisplayColor>\n\t\t\t</gpxx:TrackExtension>\n\t\t</extensions>"
	fi;

	echo -e "${gpx_start}" 
	echo -e "${gpx_metadata}"
	echo -e "\t${gpx_trkhead}"
	echo -e "\t\t<trkseg>"

	for ((i = 0; i < ${#nodes[@]}; i++)); do
		n=${nodes[$i]};
		coordinate=${coordinates[$n]};
		echo -e "\t\t\t<trkpt lat=\"${coordinate%,*}\" lon=\"${coordinate##*,}\"/>"
		
		if [ $i -ne 0 ]; then
			dist=$(distance $lastcoo ${coordinates[$n]})
			sumdist=$(echo "${sumdist:-0} + $dist" | bc -l)
			#echo " $dist $sumdist"
		fi;
		lastcoo=${coordinate}
	done
	echo -e "\t\t</trkseg>"
	echo -e "\t</trk>"
	echo -e "</gpx>"
	echo "Distance: $sumdist km" >&2
}

if [ "${type}" == "rel" ]; then
	echo "Generate relation id=${objectid}" >&2
else
	echo "generateWay ${objectid}" >&2
	if [ "${gpxfile}" != "" ]; then
		generateWay ${objectid} ${reverse} > ${gpxfile}
		echo "Created GPX file ${gpxfile}"
		if [ "${validate}" == "true" ]; then
				xmllint --noout --schema http://www.topografix.com/GPX/1/1/gpx.xsd ${gpxfile} || echo "Bad validation!" >&2
		fi;
		#gpxfile="${wayid}.gpx"
#		echo "GPX to file> '${gpxfile}'" >&2
#		exec 3<&-
	#	Open STDOUT as $LOG_FILE file for read and write.
#		exec 3<>${gpxfile}
#		echo "Create GPX file ${gpxfile}" >&2
	else
		generateWay ${objectid} ${reverse}
	fi;
	
	
	
fi;






